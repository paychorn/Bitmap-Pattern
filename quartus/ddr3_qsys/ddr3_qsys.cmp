	component ddr3_qsys is
		port (
			avl_ddr0_waitrequest         : out   std_logic;                                        -- waitrequest
			avl_ddr0_readdata            : out   std_logic_vector(63 downto 0);                    -- readdata
			avl_ddr0_readdatavalid       : out   std_logic;                                        -- readdatavalid
			avl_ddr0_burstcount          : in    std_logic_vector(4 downto 0)  := (others => 'X'); -- burstcount
			avl_ddr0_writedata           : in    std_logic_vector(63 downto 0) := (others => 'X'); -- writedata
			avl_ddr0_address             : in    std_logic_vector(28 downto 0) := (others => 'X'); -- address
			avl_ddr0_write               : in    std_logic                     := 'X';             -- write
			avl_ddr0_read                : in    std_logic                     := 'X';             -- read
			avl_ddr0_byteenable          : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- byteenable
			avl_ddr0_debugaccess         : in    std_logic                     := 'X';             -- debugaccess
			avl_ddr1_waitrequest         : out   std_logic;                                        -- waitrequest
			avl_ddr1_readdata            : out   std_logic_vector(63 downto 0);                    -- readdata
			avl_ddr1_readdatavalid       : out   std_logic;                                        -- readdatavalid
			avl_ddr1_burstcount          : in    std_logic_vector(4 downto 0)  := (others => 'X'); -- burstcount
			avl_ddr1_writedata           : in    std_logic_vector(63 downto 0) := (others => 'X'); -- writedata
			avl_ddr1_address             : in    std_logic_vector(28 downto 0) := (others => 'X'); -- address
			avl_ddr1_write               : in    std_logic                     := 'X';             -- write
			avl_ddr1_read                : in    std_logic                     := 'X';             -- read
			avl_ddr1_byteenable          : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- byteenable
			avl_ddr1_debugaccess         : in    std_logic                     := 'X';             -- debugaccess
			clk_clk                      : in    std_logic                     := 'X';             -- clk
			mem_clk_clk                  : in    std_logic                     := 'X';             -- clk
			mem_reset_reset_n            : in    std_logic                     := 'X';             -- reset_n
			mem_status_local_init_done   : out   std_logic;                                        -- local_init_done
			mem_status_local_cal_success : out   std_logic;                                        -- local_cal_success
			mem_status_local_cal_fail    : out   std_logic;                                        -- local_cal_fail
			memory_mem_a                 : out   std_logic_vector(14 downto 0);                    -- mem_a
			memory_mem_ba                : out   std_logic_vector(2 downto 0);                     -- mem_ba
			memory_mem_ck                : inout std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ck
			memory_mem_ck_n              : inout std_logic_vector(0 downto 0)  := (others => 'X'); -- mem_ck_n
			memory_mem_cke               : out   std_logic_vector(0 downto 0);                     -- mem_cke
			memory_mem_cs_n              : out   std_logic_vector(0 downto 0);                     -- mem_cs_n
			memory_mem_dm                : out   std_logic_vector(1 downto 0);                     -- mem_dm
			memory_mem_ras_n             : out   std_logic_vector(0 downto 0);                     -- mem_ras_n
			memory_mem_cas_n             : out   std_logic_vector(0 downto 0);                     -- mem_cas_n
			memory_mem_we_n              : out   std_logic_vector(0 downto 0);                     -- mem_we_n
			memory_mem_reset_n           : out   std_logic;                                        -- mem_reset_n
			memory_mem_dq                : inout std_logic_vector(15 downto 0) := (others => 'X'); -- mem_dq
			memory_mem_dqs               : inout std_logic_vector(1 downto 0)  := (others => 'X'); -- mem_dqs
			memory_mem_dqs_n             : inout std_logic_vector(1 downto 0)  := (others => 'X'); -- mem_dqs_n
			memory_mem_odt               : out   std_logic_vector(0 downto 0);                     -- mem_odt
			reset_reset_n                : in    std_logic                     := 'X'              -- reset_n
		);
	end component ddr3_qsys;

